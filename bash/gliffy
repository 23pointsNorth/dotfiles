#!/usr/bin/env bash

GOP_REPO=~/src/gliffy/online-play
EMBER_ONLINE_REPO=~/src/gliffy/ember-products/online-editor
EMBER_ONLINE_VIEWER_REPO=~/src/gliffy/ember-products/online-viewer
EMBER_ONLINE_DOCS_REPO=~/src/gliffy/ember-products/online-documents

# Commands to bring up/down/stop/restart the dev docker stack, or just bring up the MySQL db container
gop-dc() { pushd $GOP_REPO > /dev/null || exit; docker-compose -f docker-compose.yml -f docker-compose-dev.yml "$@"; popd > /dev/null || exit;  }
gop-sync() { pushd $GOP_REPO > /dev/null || exit; docker-sync start; popd > /dev/null || exit; }
gop-up() { pushd $GOP_REPO > /dev/null || exit; docker-compose -f docker-compose.yml -f docker-compose-dev.yml up -d; popd > /dev/null || exit; }
gop-down() { pushd $GOP_REPO > /dev/null || exit; docker-compose -f docker-compose.yml -f docker-compose-dev.yml down; popd > /dev/null || exit; }
gop-stop() { pushd $GOP_REPO > /dev/null || exit; docker-compose -f docker-compose.yml -f docker-compose-dev.yml stop; popd > /dev/null || exit; }
gop-restart() { pushd $GOP_REPO > /dev/null || exit; docker-compose -f docker-compose.yml -f docker-compose-dev.yml restart $1; popd > /dev/null || exit; }
gop-db() { docker run -d -v gliffyonlineplay_data:/var/lib/mysql -p 3306:3306 --network="gliffy" --name="mysql" gliffy/docker-mysql; }
gop-logs() { docker logs -f app; }
# Delete the MySQL volume, bring up just the MySQL container, ember deploy to init the db with ember manifests, destroy the MySQL container.
# Make sure your .env in the ember-online repos are set up correctly before using this.
gop-db-reset() {
	pushd $GOP_REPO > /dev/null || exit
	gop-down
	docker volume rm play_data
	gop-db
	cd $EMBER_ONLINE_REPO || exit
	ember deploy local --verbose
	cd $EMBER_ONLINE_VIEWER_REPO || exit
	ember deploy local --verbose
	cd $EMBER_ONLINE_DOCS_REPO || exit
	ember deploy local --verbose
	docker rm -f mysql
	popd > /dev/null || exit
}

alias dump.stage.ds2.diagrams="psql -h localhost -p 35432 -U ds2_stage_user_rw --command \"\\copy public.diagrams TO STDOUT;\" DS2-staging > ds2-stage-diagrams.txt"
alias dump.stage.ds2.diagram-versions="psql -h localhost -p 35432 -U ds2_stage_user_rw --command \"\\copy public.diagram_versions TO STDOUT;\" DS2-staging > ds2-stage-diagram-versions.txt"
alias dump.stage.ben.stripe-customers="psql -h localhost -p 45432 -U ben_stage_user_rw --command \"\\copy public.stripe_customers TO STDOUT;\" ben_stage > ben-stage-stripe-customers.txt"
alias dump.stage.ben.stripe-subscriptions="psql -h localhost -p 45432 -U ben_stage_user_rw --command \"\\copy public.stripe_subscriptions TO STDOUT;\" ben_stage > ben-stage-stripe-subscriptions.txt"

# ben_growth_user_rw 06hDkY6fZN22IYt9eWXC
alias dump.growth.ben.stripe-customers="psql -h localhost -p 45432 -U ben_growth_user_rw --command \"\\copy public.stripe_customers TO STDOUT;\" ben_growth > ben-growth-stripe-customers.txt"
alias dump.growth.ben.stripe-subscriptions="psql -h localhost -p 45432 -U ben_growth_user_rw --command \"\\copy public.stripe_subscriptions TO STDOUT;\" ben_growth > ben-growth-stripe-subscriptions.txt"

# shellcheck disable=SC2034
prod4="prod4-bastion.us-east-1.lte-glfy.net"
alias ssh.prod4="ssh -A \${prod4}"
alias ssh.tunnel.prod4-gop-ro='ssh ${PROD4} -T -L 127.0.0.1:33306:gop-db-prod.gliffy.net:3306'

# ssh tunnels to gliffy-2018
# shellcheck disable=SC2034
PROD=gliffy-2018-bastion-ops
alias ssh.prod='ssh ${PROD}'
# shellcheck disable=SC2034
PROD_DB_SHARED=db-shared.gliffy.local
alias ssh.tunnel.prod-shared='ssh ${PROD} -L 127.0.0.1:35432:${PROD_DB_SHARED}:5432'
alias ssh.tunnel.prod-beacon='ssh ${PROD} -L 127.0.0.1:33306:db-beacon.gliffy.local:3306'
alias ssh.tunnel.prod-pls='ssh ${PROD} -L 127.0.0.1:33307:db-pls.gliffy.local:3306'

# shellcheck disable=SC2034
STAGE=ec2-54-89-101-148.compute-1.amazonaws.com
alias ssh.stage='ssh ${STAGE}'
# shellcheck disable=SC2034
STAGE_DB_SHARED=db-shared.gliffy.local
alias ssh.tunnel.stage-shared='ssh ${STAGE} -L 127.0.0.1:35432:${STAGE_DB_SHARED}:5432'
alias ssh.tunnel.stage-beacon='ssh ${STAGE} -L 127.0.0.1:33306:db-beacon.gliffy.local:3306'
alias ssh.tunnel.stage-pls='ssh ${STAGE} -L 127.0.0.1:33307:db-pls.gliffy.local:3306'

# shellcheck disable=SC2034
DEV1=bastion.dev1.nonprod-gliffy.net
alias ssh.dev1='ssh ${DEV1}'
alias ssh.tunnel.dev1.db.beacon='ssh ${DEV1} -L 127.0.0.1:33307:db-beacon.gliffy.local:3306'
alias ssh.tunnel.dev1.db.shared='ssh -N -f -M -S /tmp/tunnel-dev1-db-shared -L 127.0.0.1:35432:db-shared.gliffy.local:5432 ${DEV1}'
alias ssh.tunnel.dev1.db.shared.close='ssh -S /tmp/tunnel-dev1-db-shared -O exit ${DEV1}'

# shellcheck disable=SC2034
DEV2=kris@bastion.dev2.nonprod-gliffy.net
alias ssh.dev2='ssh ${DEV2}'
alias ssh.tunnel.dev2.db.beacon='ssh ${DEV2} -L 127.0.0.1:33307:db-beacon.gliffy.local:3306'
alias ssh.tunnel.dev2.db.shared='ssh -N -f -M -S /tmp/tunnel-dev2-db-shared -L 127.0.0.1:35432:db-shared.gliffy.local:5432 ${DEV2}'
alias ssh.tunnel.dev2.db.shared.close='ssh -S /tmp/tunnel-dev2-db-shared -O exit ${DEV2}'

# shellcheck disable=SC2034
QA1=ec2-18-235-125-152.compute-1.amazonaws.com
alias ssh.qa1='ssh ${QA1}'
alias ssh.tunnel.qa1-pls='ssh ${QA1} -L 127.0.0.1:33306:db-pls.gliffy.local:3306'
alias ssh.tunnel.qa1-beacon='ssh ${QA1} -L 127.0.0.1:33307:db-beacon.gliffy.local:3306'
# shellcheck disable=SC2034
QA1_DB_SHARED=qa1-pg-shared-201809202302571330000000e7.cvz5silngoti.us-east-1.rds.amazonaws.com
alias ssh.tunnel.qa1-shared='ssh ${QA1} -L 127.0.0.1:35432:${QA1_DB_SHARED}:5432'
# shellcheck disable=SC2034
QA2=ec2-34-225-16-211.compute-1.amazonaws.com
alias ssh.qa2='ssh ${QA2}'
alias ssh.tunnel.qa2-pls='ssh ${QA2} -L 127.0.0.1:33306:db-pls.gliffy.local:3306'
alias ssh.tunnel.qa2-beacon='ssh ${QA2} -L 127.0.0.1:33307:db-beacon.gliffy.local:3306'
# shellcheck disable=SC2034
QA2_DB_SHARED=qa1-pg-shared-201809202302571330000000e7.cvz5silngoti.us-east-1.rds.amazonaws.com
alias ssh.tunnel.qa2-shared='ssh ${QA2} -L 127.0.0.1:35432:${QA2_DB_SHARED}:5432'

# docker run --rm -v `pwd`/flyway/conf:/flyway/conf -v `pwd`/flyway/sql:/flyway/sql boxfuse/flyway info
